// Mocks generated by Mockito 5.4.4 from annotations
// in jwt_auth/test/jwt_authentication_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:jwt_auth/jwt_authentication_repository.dart' as _i3;
import 'package:jwt_auth/models/jwt_authentication_status.dart' as _i5;
import 'package:jwt_auth/models/jwt_token.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUri_0 extends _i1.SmartFake implements Uri {
  _FakeUri_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeJwtToken_1 extends _i1.SmartFake implements _i2.JwtToken {
  _FakeJwtToken_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [JwtAuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockJwtAuthenticationRepository extends _i1.Mock
    implements _i3.JwtAuthenticationRepository {
  MockJwtAuthenticationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Uri get tokenUri => (super.noSuchMethod(
        Invocation.getter(#tokenUri),
        returnValue: _FakeUri_0(
          this,
          Invocation.getter(#tokenUri),
        ),
      ) as Uri);

  @override
  set tokenUri(Uri? _tokenUri) => super.noSuchMethod(
        Invocation.setter(
          #tokenUri,
          _tokenUri,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Uri get refreshUri => (super.noSuchMethod(
        Invocation.getter(#refreshUri),
        returnValue: _FakeUri_0(
          this,
          Invocation.getter(#refreshUri),
        ),
      ) as Uri);

  @override
  set refreshUri(Uri? _refreshUri) => super.noSuchMethod(
        Invocation.setter(
          #refreshUri,
          _refreshUri,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Stream<_i5.JwtAuthenticationStatus> get statusStream =>
      (super.noSuchMethod(
        Invocation.getter(#statusStream),
        returnValue: _i4.Stream<_i5.JwtAuthenticationStatus>.empty(),
      ) as _i4.Stream<_i5.JwtAuthenticationStatus>);

  @override
  _i4.Stream<_i2.JwtToken?> get jwtTokenStream => (super.noSuchMethod(
        Invocation.getter(#jwtTokenStream),
        returnValue: _i4.Stream<_i2.JwtToken?>.empty(),
      ) as _i4.Stream<_i2.JwtToken?>);

  @override
  _i4.Future<_i2.JwtToken> login(
    String? username,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            username,
            password,
          ],
        ),
        returnValue: _i4.Future<_i2.JwtToken>.value(_FakeJwtToken_1(
          this,
          Invocation.method(
            #login,
            [
              username,
              password,
            ],
          ),
        )),
      ) as _i4.Future<_i2.JwtToken>);

  @override
  _i4.Future<_i2.JwtToken> refreshToken() => (super.noSuchMethod(
        Invocation.method(
          #refreshToken,
          [],
        ),
        returnValue: _i4.Future<_i2.JwtToken>.value(_FakeJwtToken_1(
          this,
          Invocation.method(
            #refreshToken,
            [],
          ),
        )),
      ) as _i4.Future<_i2.JwtToken>);
}
